// Code generated by MockGen. DO NOT EDIT.
// Source: cds.ikigai.net/cabinet.v1/rpc (interfaces: CDSCabinetClient)

// Package mock_rpc is a generated GoMock package.
package mock_rpc

import (
	rpc "cds.ikigai.net/cabinet.v1/rpc"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCDSCabinetClient is a mock of CDSCabinetClient interface
type MockCDSCabinetClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDSCabinetClientMockRecorder
}

// MockCDSCabinetClientMockRecorder is the mock recorder for MockCDSCabinetClient
type MockCDSCabinetClientMockRecorder struct {
	mock *MockCDSCabinetClient
}

// NewMockCDSCabinetClient creates a new mock instance
func NewMockCDSCabinetClient(ctrl *gomock.Controller) *MockCDSCabinetClient {
	mock := &MockCDSCabinetClient{ctrl: ctrl}
	mock.recorder = &MockCDSCabinetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCDSCabinetClient) EXPECT() *MockCDSCabinetClientMockRecorder {
	return m.recorder
}

// CounterGet mocks base method
func (m *MockCDSCabinetClient) CounterGet(arg0 context.Context, arg1 *rpc.Counter, arg2 ...grpc.CallOption) (*rpc.CounterValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterGet", varargs...)
	ret0, _ := ret[0].(*rpc.CounterValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterGet indicates an expected call of CounterGet
func (mr *MockCDSCabinetClientMockRecorder) CounterGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterGet", reflect.TypeOf((*MockCDSCabinetClient)(nil).CounterGet), varargs...)
}

// EdgeGet mocks base method
func (m *MockCDSCabinetClient) EdgeGet(arg0 context.Context, arg1 *rpc.EdgeGetRequest, arg2 ...grpc.CallOption) (*rpc.Edge, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EdgeGet", varargs...)
	ret0, _ := ret[0].(*rpc.Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EdgeGet indicates an expected call of EdgeGet
func (mr *MockCDSCabinetClientMockRecorder) EdgeGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EdgeGet", reflect.TypeOf((*MockCDSCabinetClient)(nil).EdgeGet), varargs...)
}

// EdgeList mocks base method
func (m *MockCDSCabinetClient) EdgeList(arg0 context.Context, arg1 *rpc.EdgeListRequest, arg2 ...grpc.CallOption) (rpc.CDSCabinet_EdgeListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EdgeList", varargs...)
	ret0, _ := ret[0].(rpc.CDSCabinet_EdgeListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EdgeList indicates an expected call of EdgeList
func (mr *MockCDSCabinetClientMockRecorder) EdgeList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EdgeList", reflect.TypeOf((*MockCDSCabinetClient)(nil).EdgeList), varargs...)
}

// IndexChoices mocks base method
func (m *MockCDSCabinetClient) IndexChoices(arg0 context.Context, arg1 *rpc.IndexChoiceRequest, arg2 ...grpc.CallOption) (rpc.CDSCabinet_IndexChoicesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexChoices", varargs...)
	ret0, _ := ret[0].(rpc.CDSCabinet_IndexChoicesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexChoices indicates an expected call of IndexChoices
func (mr *MockCDSCabinetClientMockRecorder) IndexChoices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexChoices", reflect.TypeOf((*MockCDSCabinetClient)(nil).IndexChoices), varargs...)
}

// IndexDrop mocks base method
func (m *MockCDSCabinetClient) IndexDrop(arg0 context.Context, arg1 *rpc.IndexDropRequest, arg2 ...grpc.CallOption) (*rpc.MutationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexDrop", varargs...)
	ret0, _ := ret[0].(*rpc.MutationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDrop indicates an expected call of IndexDrop
func (mr *MockCDSCabinetClientMockRecorder) IndexDrop(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDrop", reflect.TypeOf((*MockCDSCabinetClient)(nil).IndexDrop), varargs...)
}

// IndexGet mocks base method
func (m *MockCDSCabinetClient) IndexGet(arg0 context.Context, arg1 *rpc.IndexGetRequest, arg2 ...grpc.CallOption) (*rpc.Index, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexGet", varargs...)
	ret0, _ := ret[0].(*rpc.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexGet indicates an expected call of IndexGet
func (mr *MockCDSCabinetClientMockRecorder) IndexGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexGet", reflect.TypeOf((*MockCDSCabinetClient)(nil).IndexGet), varargs...)
}

// IndexList mocks base method
func (m *MockCDSCabinetClient) IndexList(arg0 context.Context, arg1 *rpc.IndexListRequest, arg2 ...grpc.CallOption) (rpc.CDSCabinet_IndexListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexList", varargs...)
	ret0, _ := ret[0].(rpc.CDSCabinet_IndexListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexList indicates an expected call of IndexList
func (mr *MockCDSCabinetClientMockRecorder) IndexList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexList", reflect.TypeOf((*MockCDSCabinetClient)(nil).IndexList), varargs...)
}

// MetaGet mocks base method
func (m *MockCDSCabinetClient) MetaGet(arg0 context.Context, arg1 *rpc.Meta, arg2 ...grpc.CallOption) (*rpc.MetaGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MetaGet", varargs...)
	ret0, _ := ret[0].(*rpc.MetaGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetaGet indicates an expected call of MetaGet
func (mr *MockCDSCabinetClientMockRecorder) MetaGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetaGet", reflect.TypeOf((*MockCDSCabinetClient)(nil).MetaGet), varargs...)
}

// MetaList mocks base method
func (m *MockCDSCabinetClient) MetaList(arg0 context.Context, arg1 *rpc.MetaListRequest, arg2 ...grpc.CallOption) (rpc.CDSCabinet_MetaListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MetaList", varargs...)
	ret0, _ := ret[0].(rpc.CDSCabinet_MetaListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetaList indicates an expected call of MetaList
func (mr *MockCDSCabinetClientMockRecorder) MetaList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetaList", reflect.TypeOf((*MockCDSCabinetClient)(nil).MetaList), varargs...)
}

// NodeGet mocks base method
func (m *MockCDSCabinetClient) NodeGet(arg0 context.Context, arg1 *rpc.NodeGetRequest, arg2 ...grpc.CallOption) (*rpc.Node, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeGet", varargs...)
	ret0, _ := ret[0].(*rpc.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGet indicates an expected call of NodeGet
func (mr *MockCDSCabinetClientMockRecorder) NodeGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGet", reflect.TypeOf((*MockCDSCabinetClient)(nil).NodeGet), varargs...)
}

// NodeList mocks base method
func (m *MockCDSCabinetClient) NodeList(arg0 context.Context, arg1 *rpc.NodeListRequest, arg2 ...grpc.CallOption) (rpc.CDSCabinet_NodeListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeList", varargs...)
	ret0, _ := ret[0].(rpc.CDSCabinet_NodeListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeList indicates an expected call of NodeList
func (mr *MockCDSCabinetClientMockRecorder) NodeList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeList", reflect.TypeOf((*MockCDSCabinetClient)(nil).NodeList), varargs...)
}

// ReadCheck mocks base method
func (m *MockCDSCabinetClient) ReadCheck(arg0 context.Context, arg1 *rpc.ReadCheckRequest, arg2 ...grpc.CallOption) (*rpc.ReadCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadCheck", varargs...)
	ret0, _ := ret[0].(*rpc.ReadCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCheck indicates an expected call of ReadCheck
func (mr *MockCDSCabinetClientMockRecorder) ReadCheck(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCheck", reflect.TypeOf((*MockCDSCabinetClient)(nil).ReadCheck), varargs...)
}

// SequentialCreate mocks base method
func (m *MockCDSCabinetClient) SequentialCreate(arg0 context.Context, arg1 *rpc.Sequential, arg2 ...grpc.CallOption) (*rpc.Sequential, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SequentialCreate", varargs...)
	ret0, _ := ret[0].(*rpc.Sequential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SequentialCreate indicates an expected call of SequentialCreate
func (mr *MockCDSCabinetClientMockRecorder) SequentialCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequentialCreate", reflect.TypeOf((*MockCDSCabinetClient)(nil).SequentialCreate), varargs...)
}

// SequentialDelete mocks base method
func (m *MockCDSCabinetClient) SequentialDelete(arg0 context.Context, arg1 *rpc.Sequential, arg2 ...grpc.CallOption) (*rpc.MutationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SequentialDelete", varargs...)
	ret0, _ := ret[0].(*rpc.MutationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SequentialDelete indicates an expected call of SequentialDelete
func (mr *MockCDSCabinetClientMockRecorder) SequentialDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequentialDelete", reflect.TypeOf((*MockCDSCabinetClient)(nil).SequentialDelete), varargs...)
}

// SequentialGet mocks base method
func (m *MockCDSCabinetClient) SequentialGet(arg0 context.Context, arg1 *rpc.Sequential, arg2 ...grpc.CallOption) (*rpc.Sequential, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SequentialGet", varargs...)
	ret0, _ := ret[0].(*rpc.Sequential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SequentialGet indicates an expected call of SequentialGet
func (mr *MockCDSCabinetClientMockRecorder) SequentialGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequentialGet", reflect.TypeOf((*MockCDSCabinetClient)(nil).SequentialGet), varargs...)
}

// SequentialList mocks base method
func (m *MockCDSCabinetClient) SequentialList(arg0 context.Context, arg1 *rpc.SequentialListRequest, arg2 ...grpc.CallOption) (rpc.CDSCabinet_SequentialListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SequentialList", varargs...)
	ret0, _ := ret[0].(rpc.CDSCabinet_SequentialListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SequentialList indicates an expected call of SequentialList
func (mr *MockCDSCabinetClientMockRecorder) SequentialList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequentialList", reflect.TypeOf((*MockCDSCabinetClient)(nil).SequentialList), varargs...)
}

// Transaction mocks base method
func (m *MockCDSCabinetClient) Transaction(arg0 context.Context, arg1 ...grpc.CallOption) (rpc.CDSCabinet_TransactionClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(rpc.CDSCabinet_TransactionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction
func (mr *MockCDSCabinetClientMockRecorder) Transaction(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockCDSCabinetClient)(nil).Transaction), varargs...)
}
