// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cabinet.proto

package cds_cabinet_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("cabinet.proto", fileDescriptor_d677e6cffaacc14d) }

var fileDescriptor_d677e6cffaacc14d = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x6f, 0x6f, 0xd3, 0x30,
	0x10, 0xc6, 0x95, 0x37, 0xac, 0xbb, 0xad, 0xd3, 0x74, 0x30, 0x01, 0x41, 0x62, 0x0c, 0x81, 0x04,
	0x6f, 0xaa, 0x00, 0x1f, 0x80, 0x3f, 0x29, 0x4c, 0xfc, 0x19, 0x8c, 0x0e, 0x78, 0x3b, 0x79, 0xc9,
	0x69, 0x8d, 0x28, 0x76, 0x89, 0xdd, 0x89, 0x2f, 0xc1, 0x77, 0x46, 0x97, 0xd8, 0x8d, 0x97, 0x38,
	0xa9, 0xc4, 0x9b, 0x26, 0xb9, 0xdf, 0xe3, 0xc7, 0x8f, 0xee, 0xec, 0xc2, 0x38, 0x13, 0x17, 0x85,
	0x24, 0x33, 0x59, 0x96, 0xca, 0x28, 0xdc, 0xcb, 0x72, 0x3d, 0x71, 0xa5, 0xab, 0x67, 0xf1, 0x81,
	0xa6, 0xf2, 0xaa, 0xc8, 0xe8, 0x3c, 0x53, 0x2b, 0x69, 0xa8, 0xac, 0x65, 0x31, 0xba, 0x32, 0xe5,
	0x97, 0x64, 0x6b, 0x37, 0x5d, 0xad, 0x90, 0x39, 0xfd, 0x69, 0x0b, 0x7f, 0x91, 0x11, 0xed, 0x9a,
	0x54, 0xb9, 0x5b, 0x7c, 0xc7, 0xd5, 0x34, 0xfd, 0x5e, 0x91, 0x34, 0x85, 0x58, 0x58, 0x72, 0xd7,
	0x11, 0x53, 0x0a, 0xa9, 0x45, 0x66, 0x0a, 0x25, 0x2d, 0x1a, 0x5f, 0x0f, 0x05, 0x5e, 0x98, 0x1d,
	0x3f, 0x04, 0x78, 0x9b, 0x83, 0xb7, 0xe9, 0x7e, 0x67, 0xb3, 0x5d, 0x3d, 0x17, 0x25, 0xe5, 0xf5,
	0xd7, 0xf3, 0xbf, 0x00, 0x90, 0x4e, 0xcf, 0xd2, 0xba, 0x1d, 0xf8, 0x11, 0x20, 0xad, 0x37, 0x3c,
	0x26, 0x83, 0xb7, 0x27, 0xd7, 0x5b, 0x35, 0xb1, 0x2c, 0x7e, 0xd4, 0x03, 0x7e, 0x88, 0xc5, 0x8a,
	0x66, 0xa4, 0x97, 0x4a, 0x6a, 0xc2, 0x97, 0xb0, 0xf5, 0x36, 0xbf, 0x24, 0x76, 0xba, 0xdf, 0x5e,
	0x60, 0xc1, 0x8c, 0xd3, 0x69, 0x13, 0xdf, 0x0a, 0x71, 0x4c, 0x61, 0xc4, 0xcf, 0x4f, 0x85, 0x36,
	0x78, 0x18, 0x52, 0x30, 0x19, 0xb4, 0x48, 0x22, 0x7c, 0x03, 0xa3, 0xf7, 0xdc, 0x28, 0x8e, 0xd1,
	0x31, 0x71, 0xc4, 0x99, 0x1c, 0x04, 0x05, 0xf8, 0x0e, 0xb6, 0xab, 0x97, 0x2a, 0xc9, 0x83, 0xa0,
	0xc6, 0x8f, 0x12, 0x76, 0x49, 0x22, 0xfc, 0x0a, 0xbb, 0xd5, 0x6b, 0x3a, 0x57, 0x45, 0x46, 0x1a,
	0x1f, 0x06, 0x85, 0x35, 0x75, 0x66, 0xf7, 0x06, 0x34, 0x49, 0x84, 0x5f, 0x6c, 0xb4, 0x69, 0xa9,
	0x96, 0x3d, 0xd1, 0x18, 0x39, 0xb7, 0x8e, 0xe2, 0x64, 0x65, 0x04, 0x9f, 0xb7, 0xf5, 0xd4, 0x5e,
	0xc1, 0xd6, 0x09, 0x19, 0xc1, 0xed, 0xea, 0xb4, 0x94, 0x41, 0x7c, 0x18, 0xaa, 0x56, 0x3d, 0xb4,
	0x0e, 0x29, 0x8c, 0xb8, 0x14, 0x1e, 0x9b, 0x23, 0xbd, 0x63, 0x63, 0x41, 0x12, 0xf1, 0xe1, 0xf9,
	0xac, 0xf2, 0xf0, 0xe1, 0xb1, 0xa0, 0xd7, 0x82, 0x39, 0xa7, 0xe0, 0x67, 0x38, 0x85, 0x23, 0x83,
	0x16, 0x49, 0x84, 0xe7, 0xb0, 0xf3, 0xad, 0xb9, 0x93, 0x78, 0xd4, 0x96, 0x79, 0xf0, 0x75, 0xf5,
	0x1b, 0x3f, 0xdd, 0x28, 0x71, 0x7d, 0x7a, 0x12, 0x25, 0x11, 0x9e, 0xc2, 0xf6, 0x8c, 0x44, 0x9e,
	0xce, 0x29, 0xfb, 0xd9, 0x1d, 0xdf, 0x1a, 0xb9, 0x9c, 0x47, 0x03, 0x0a, 0xdb, 0xfd, 0x0f, 0xb0,
	0x7f, 0xb6, 0xbe, 0xf3, 0x69, 0x49, 0xc2, 0x10, 0xc6, 0xed, 0x65, 0x8d, 0x22, 0x1e, 0x60, 0x78,
	0xea, 0x7b, 0x4d, 0x69, 0x41, 0x1b, 0xbc, 0x36, 0x9f, 0xae, 0x63, 0x18, 0x37, 0x7a, 0x1e, 0xee,
	0xff, 0x46, 0xfb, 0x0e, 0x7b, 0xcd, 0x57, 0x35, 0xe4, 0xc7, 0xfd, 0x6a, 0x7f, 0xd4, 0x03, 0xa6,
	0x49, 0x74, 0x71, 0xa3, 0xfa, 0x5b, 0x7c, 0xf1, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x83, 0x76, 0x9a,
	0x17, 0x34, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CDSCabinetClient is the client API for CDSCabinet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDSCabinetClient interface {
	CounterGet(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*CounterValueResponse, error)
	EdgeGet(ctx context.Context, in *EdgeGetRequest, opts ...grpc.CallOption) (*Edge, error)
	EdgeList(ctx context.Context, in *EdgeListRequest, opts ...grpc.CallOption) (CDSCabinet_EdgeListClient, error)
	IndexGet(ctx context.Context, in *IndexGetRequest, opts ...grpc.CallOption) (*Index, error)
	IndexList(ctx context.Context, in *IndexListRequest, opts ...grpc.CallOption) (CDSCabinet_IndexListClient, error)
	IndexChoices(ctx context.Context, in *IndexChoiceRequest, opts ...grpc.CallOption) (CDSCabinet_IndexChoicesClient, error)
	IndexDrop(ctx context.Context, in *IndexDropRequest, opts ...grpc.CallOption) (*MutationResponse, error)
	MetaGet(ctx context.Context, in *Meta, opts ...grpc.CallOption) (*MetaGetResponse, error)
	MetaList(ctx context.Context, in *MetaListRequest, opts ...grpc.CallOption) (CDSCabinet_MetaListClient, error)
	NodeGet(ctx context.Context, in *NodeGetRequest, opts ...grpc.CallOption) (*Node, error)
	NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (CDSCabinet_NodeListClient, error)
	Transaction(ctx context.Context, opts ...grpc.CallOption) (CDSCabinet_TransactionClient, error)
	ReadCheck(ctx context.Context, in *ReadCheckRequest, opts ...grpc.CallOption) (*ReadCheckResponse, error)
	SequentialCreate(ctx context.Context, in *Sequential, opts ...grpc.CallOption) (*Sequential, error)
	SequentialDelete(ctx context.Context, in *Sequential, opts ...grpc.CallOption) (*MutationResponse, error)
	SequentialGet(ctx context.Context, in *Sequential, opts ...grpc.CallOption) (*Sequential, error)
	SequentialList(ctx context.Context, in *SequentialListRequest, opts ...grpc.CallOption) (CDSCabinet_SequentialListClient, error)
}

type cDSCabinetClient struct {
	cc *grpc.ClientConn
}

func NewCDSCabinetClient(cc *grpc.ClientConn) CDSCabinetClient {
	return &cDSCabinetClient{cc}
}

func (c *cDSCabinetClient) CounterGet(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*CounterValueResponse, error) {
	out := new(CounterValueResponse)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/CounterGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) EdgeGet(ctx context.Context, in *EdgeGetRequest, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/EdgeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) EdgeList(ctx context.Context, in *EdgeListRequest, opts ...grpc.CallOption) (CDSCabinet_EdgeListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDSCabinet_serviceDesc.Streams[0], "/cds.cabinet.v1.CDSCabinet/EdgeList", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDSCabinetEdgeListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDSCabinet_EdgeListClient interface {
	Recv() (*Edge, error)
	grpc.ClientStream
}

type cDSCabinetEdgeListClient struct {
	grpc.ClientStream
}

func (x *cDSCabinetEdgeListClient) Recv() (*Edge, error) {
	m := new(Edge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDSCabinetClient) IndexGet(ctx context.Context, in *IndexGetRequest, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/IndexGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) IndexList(ctx context.Context, in *IndexListRequest, opts ...grpc.CallOption) (CDSCabinet_IndexListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDSCabinet_serviceDesc.Streams[1], "/cds.cabinet.v1.CDSCabinet/IndexList", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDSCabinetIndexListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDSCabinet_IndexListClient interface {
	Recv() (*Index, error)
	grpc.ClientStream
}

type cDSCabinetIndexListClient struct {
	grpc.ClientStream
}

func (x *cDSCabinetIndexListClient) Recv() (*Index, error) {
	m := new(Index)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDSCabinetClient) IndexChoices(ctx context.Context, in *IndexChoiceRequest, opts ...grpc.CallOption) (CDSCabinet_IndexChoicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDSCabinet_serviceDesc.Streams[2], "/cds.cabinet.v1.CDSCabinet/IndexChoices", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDSCabinetIndexChoicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDSCabinet_IndexChoicesClient interface {
	Recv() (*IndexChoice, error)
	grpc.ClientStream
}

type cDSCabinetIndexChoicesClient struct {
	grpc.ClientStream
}

func (x *cDSCabinetIndexChoicesClient) Recv() (*IndexChoice, error) {
	m := new(IndexChoice)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDSCabinetClient) IndexDrop(ctx context.Context, in *IndexDropRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/IndexDrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) MetaGet(ctx context.Context, in *Meta, opts ...grpc.CallOption) (*MetaGetResponse, error) {
	out := new(MetaGetResponse)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/MetaGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) MetaList(ctx context.Context, in *MetaListRequest, opts ...grpc.CallOption) (CDSCabinet_MetaListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDSCabinet_serviceDesc.Streams[3], "/cds.cabinet.v1.CDSCabinet/MetaList", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDSCabinetMetaListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDSCabinet_MetaListClient interface {
	Recv() (*Meta, error)
	grpc.ClientStream
}

type cDSCabinetMetaListClient struct {
	grpc.ClientStream
}

func (x *cDSCabinetMetaListClient) Recv() (*Meta, error) {
	m := new(Meta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDSCabinetClient) NodeGet(ctx context.Context, in *NodeGetRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/NodeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (CDSCabinet_NodeListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDSCabinet_serviceDesc.Streams[4], "/cds.cabinet.v1.CDSCabinet/NodeList", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDSCabinetNodeListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDSCabinet_NodeListClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type cDSCabinetNodeListClient struct {
	grpc.ClientStream
}

func (x *cDSCabinetNodeListClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDSCabinetClient) Transaction(ctx context.Context, opts ...grpc.CallOption) (CDSCabinet_TransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDSCabinet_serviceDesc.Streams[5], "/cds.cabinet.v1.CDSCabinet/Transaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDSCabinetTransactionClient{stream}
	return x, nil
}

type CDSCabinet_TransactionClient interface {
	Send(*TransactionAction) error
	Recv() (*TransactionActionResponse, error)
	grpc.ClientStream
}

type cDSCabinetTransactionClient struct {
	grpc.ClientStream
}

func (x *cDSCabinetTransactionClient) Send(m *TransactionAction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cDSCabinetTransactionClient) Recv() (*TransactionActionResponse, error) {
	m := new(TransactionActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDSCabinetClient) ReadCheck(ctx context.Context, in *ReadCheckRequest, opts ...grpc.CallOption) (*ReadCheckResponse, error) {
	out := new(ReadCheckResponse)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/ReadCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) SequentialCreate(ctx context.Context, in *Sequential, opts ...grpc.CallOption) (*Sequential, error) {
	out := new(Sequential)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/SequentialCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) SequentialDelete(ctx context.Context, in *Sequential, opts ...grpc.CallOption) (*MutationResponse, error) {
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/SequentialDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) SequentialGet(ctx context.Context, in *Sequential, opts ...grpc.CallOption) (*Sequential, error) {
	out := new(Sequential)
	err := c.cc.Invoke(ctx, "/cds.cabinet.v1.CDSCabinet/SequentialGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDSCabinetClient) SequentialList(ctx context.Context, in *SequentialListRequest, opts ...grpc.CallOption) (CDSCabinet_SequentialListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDSCabinet_serviceDesc.Streams[6], "/cds.cabinet.v1.CDSCabinet/SequentialList", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDSCabinetSequentialListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDSCabinet_SequentialListClient interface {
	Recv() (*Sequential, error)
	grpc.ClientStream
}

type cDSCabinetSequentialListClient struct {
	grpc.ClientStream
}

func (x *cDSCabinetSequentialListClient) Recv() (*Sequential, error) {
	m := new(Sequential)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CDSCabinetServer is the server API for CDSCabinet service.
type CDSCabinetServer interface {
	CounterGet(context.Context, *Counter) (*CounterValueResponse, error)
	EdgeGet(context.Context, *EdgeGetRequest) (*Edge, error)
	EdgeList(*EdgeListRequest, CDSCabinet_EdgeListServer) error
	IndexGet(context.Context, *IndexGetRequest) (*Index, error)
	IndexList(*IndexListRequest, CDSCabinet_IndexListServer) error
	IndexChoices(*IndexChoiceRequest, CDSCabinet_IndexChoicesServer) error
	IndexDrop(context.Context, *IndexDropRequest) (*MutationResponse, error)
	MetaGet(context.Context, *Meta) (*MetaGetResponse, error)
	MetaList(*MetaListRequest, CDSCabinet_MetaListServer) error
	NodeGet(context.Context, *NodeGetRequest) (*Node, error)
	NodeList(*NodeListRequest, CDSCabinet_NodeListServer) error
	Transaction(CDSCabinet_TransactionServer) error
	ReadCheck(context.Context, *ReadCheckRequest) (*ReadCheckResponse, error)
	SequentialCreate(context.Context, *Sequential) (*Sequential, error)
	SequentialDelete(context.Context, *Sequential) (*MutationResponse, error)
	SequentialGet(context.Context, *Sequential) (*Sequential, error)
	SequentialList(*SequentialListRequest, CDSCabinet_SequentialListServer) error
}

func RegisterCDSCabinetServer(s *grpc.Server, srv CDSCabinetServer) {
	s.RegisterService(&_CDSCabinet_serviceDesc, srv)
}

func _CDSCabinet_CounterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Counter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).CounterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/CounterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).CounterGet(ctx, req.(*Counter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_EdgeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).EdgeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/EdgeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).EdgeGet(ctx, req.(*EdgeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_EdgeList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EdgeListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDSCabinetServer).EdgeList(m, &cDSCabinetEdgeListServer{stream})
}

type CDSCabinet_EdgeListServer interface {
	Send(*Edge) error
	grpc.ServerStream
}

type cDSCabinetEdgeListServer struct {
	grpc.ServerStream
}

func (x *cDSCabinetEdgeListServer) Send(m *Edge) error {
	return x.ServerStream.SendMsg(m)
}

func _CDSCabinet_IndexGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).IndexGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/IndexGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).IndexGet(ctx, req.(*IndexGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_IndexList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IndexListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDSCabinetServer).IndexList(m, &cDSCabinetIndexListServer{stream})
}

type CDSCabinet_IndexListServer interface {
	Send(*Index) error
	grpc.ServerStream
}

type cDSCabinetIndexListServer struct {
	grpc.ServerStream
}

func (x *cDSCabinetIndexListServer) Send(m *Index) error {
	return x.ServerStream.SendMsg(m)
}

func _CDSCabinet_IndexChoices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IndexChoiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDSCabinetServer).IndexChoices(m, &cDSCabinetIndexChoicesServer{stream})
}

type CDSCabinet_IndexChoicesServer interface {
	Send(*IndexChoice) error
	grpc.ServerStream
}

type cDSCabinetIndexChoicesServer struct {
	grpc.ServerStream
}

func (x *cDSCabinetIndexChoicesServer) Send(m *IndexChoice) error {
	return x.ServerStream.SendMsg(m)
}

func _CDSCabinet_IndexDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).IndexDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/IndexDrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).IndexDrop(ctx, req.(*IndexDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_MetaGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Meta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).MetaGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/MetaGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).MetaGet(ctx, req.(*Meta))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_MetaList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetaListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDSCabinetServer).MetaList(m, &cDSCabinetMetaListServer{stream})
}

type CDSCabinet_MetaListServer interface {
	Send(*Meta) error
	grpc.ServerStream
}

type cDSCabinetMetaListServer struct {
	grpc.ServerStream
}

func (x *cDSCabinetMetaListServer) Send(m *Meta) error {
	return x.ServerStream.SendMsg(m)
}

func _CDSCabinet_NodeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).NodeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/NodeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).NodeGet(ctx, req.(*NodeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_NodeList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDSCabinetServer).NodeList(m, &cDSCabinetNodeListServer{stream})
}

type CDSCabinet_NodeListServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type cDSCabinetNodeListServer struct {
	grpc.ServerStream
}

func (x *cDSCabinetNodeListServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _CDSCabinet_Transaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CDSCabinetServer).Transaction(&cDSCabinetTransactionServer{stream})
}

type CDSCabinet_TransactionServer interface {
	Send(*TransactionActionResponse) error
	Recv() (*TransactionAction, error)
	grpc.ServerStream
}

type cDSCabinetTransactionServer struct {
	grpc.ServerStream
}

func (x *cDSCabinetTransactionServer) Send(m *TransactionActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cDSCabinetTransactionServer) Recv() (*TransactionAction, error) {
	m := new(TransactionAction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CDSCabinet_ReadCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).ReadCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/ReadCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).ReadCheck(ctx, req.(*ReadCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_SequentialCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sequential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).SequentialCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/SequentialCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).SequentialCreate(ctx, req.(*Sequential))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_SequentialDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sequential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).SequentialDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/SequentialDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).SequentialDelete(ctx, req.(*Sequential))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_SequentialGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sequential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDSCabinetServer).SequentialGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cds.cabinet.v1.CDSCabinet/SequentialGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDSCabinetServer).SequentialGet(ctx, req.(*Sequential))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDSCabinet_SequentialList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SequentialListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDSCabinetServer).SequentialList(m, &cDSCabinetSequentialListServer{stream})
}

type CDSCabinet_SequentialListServer interface {
	Send(*Sequential) error
	grpc.ServerStream
}

type cDSCabinetSequentialListServer struct {
	grpc.ServerStream
}

func (x *cDSCabinetSequentialListServer) Send(m *Sequential) error {
	return x.ServerStream.SendMsg(m)
}

var _CDSCabinet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cds.cabinet.v1.CDSCabinet",
	HandlerType: (*CDSCabinetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CounterGet",
			Handler:    _CDSCabinet_CounterGet_Handler,
		},
		{
			MethodName: "EdgeGet",
			Handler:    _CDSCabinet_EdgeGet_Handler,
		},
		{
			MethodName: "IndexGet",
			Handler:    _CDSCabinet_IndexGet_Handler,
		},
		{
			MethodName: "IndexDrop",
			Handler:    _CDSCabinet_IndexDrop_Handler,
		},
		{
			MethodName: "MetaGet",
			Handler:    _CDSCabinet_MetaGet_Handler,
		},
		{
			MethodName: "NodeGet",
			Handler:    _CDSCabinet_NodeGet_Handler,
		},
		{
			MethodName: "ReadCheck",
			Handler:    _CDSCabinet_ReadCheck_Handler,
		},
		{
			MethodName: "SequentialCreate",
			Handler:    _CDSCabinet_SequentialCreate_Handler,
		},
		{
			MethodName: "SequentialDelete",
			Handler:    _CDSCabinet_SequentialDelete_Handler,
		},
		{
			MethodName: "SequentialGet",
			Handler:    _CDSCabinet_SequentialGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EdgeList",
			Handler:       _CDSCabinet_EdgeList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IndexList",
			Handler:       _CDSCabinet_IndexList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IndexChoices",
			Handler:       _CDSCabinet_IndexChoices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetaList",
			Handler:       _CDSCabinet_MetaList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NodeList",
			Handler:       _CDSCabinet_NodeList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Transaction",
			Handler:       _CDSCabinet_Transaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SequentialList",
			Handler:       _CDSCabinet_SequentialList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cabinet.proto",
}
