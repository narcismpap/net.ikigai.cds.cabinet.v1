// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts.proto

package cds_cabinet_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionRetryBehaviour int32

const (
	TransactionRetryBehaviour_AUTOMATIC      TransactionRetryBehaviour = 0
	TransactionRetryBehaviour_SINGLE_ATTEMPT TransactionRetryBehaviour = 1
	TransactionRetryBehaviour_SINGLE_RETRY   TransactionRetryBehaviour = 2
)

var TransactionRetryBehaviour_name = map[int32]string{
	0: "AUTOMATIC",
	1: "SINGLE_ATTEMPT",
	2: "SINGLE_RETRY",
}

var TransactionRetryBehaviour_value = map[string]int32{
	"AUTOMATIC":      0,
	"SINGLE_ATTEMPT": 1,
	"SINGLE_RETRY":   2,
}

func (x TransactionRetryBehaviour) String() string {
	return proto.EnumName(TransactionRetryBehaviour_name, int32(x))
}

func (TransactionRetryBehaviour) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f695bd055fd0de95, []int{0}
}

type CheckOperators int32

const (
	CheckOperators_EXISTS             CheckOperators = 0
	CheckOperators_EQUAL              CheckOperators = 1
	CheckOperators_NOT_EQUAL          CheckOperators = 2
	CheckOperators_GREATER_THAN       CheckOperators = 3
	CheckOperators_GREATER_THAN_EQUAL CheckOperators = 4
	CheckOperators_LESS_THAN          CheckOperators = 5
	CheckOperators_LESS_THAN_EQUAL    CheckOperators = 6
	CheckOperators_BETWEEN            CheckOperators = 7
)

var CheckOperators_name = map[int32]string{
	0: "EXISTS",
	1: "EQUAL",
	2: "NOT_EQUAL",
	3: "GREATER_THAN",
	4: "GREATER_THAN_EQUAL",
	5: "LESS_THAN",
	6: "LESS_THAN_EQUAL",
	7: "BETWEEN",
}

var CheckOperators_value = map[string]int32{
	"EXISTS":             0,
	"EQUAL":              1,
	"NOT_EQUAL":          2,
	"GREATER_THAN":       3,
	"GREATER_THAN_EQUAL": 4,
	"LESS_THAN":          5,
	"LESS_THAN_EQUAL":    6,
	"BETWEEN":            7,
}

func (x CheckOperators) String() string {
	return proto.EnumName(CheckOperators_name, int32(x))
}

func (CheckOperators) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f695bd055fd0de95, []int{1}
}

type FieldType int32

const (
	FieldType_NODE      FieldType = 0
	FieldType_PREDICATE FieldType = 1
	FieldType_INDEX     FieldType = 2
	FieldType_PROPERTY  FieldType = 3
	FieldType_META      FieldType = 4
	FieldType_COUNTER   FieldType = 5
)

var FieldType_name = map[int32]string{
	0: "NODE",
	1: "PREDICATE",
	2: "INDEX",
	3: "PROPERTY",
	4: "META",
	5: "COUNTER",
}

var FieldType_value = map[string]int32{
	"NODE":      0,
	"PREDICATE": 1,
	"INDEX":     2,
	"PROPERTY":  3,
	"META":      4,
	"COUNTER":   5,
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}

func (FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f695bd055fd0de95, []int{2}
}

type ErrorCodes int32

const (
	ErrorCodes_AccessDenied               ErrorCodes = 0
	ErrorCodes_AccessDeniedIRI            ErrorCodes = 1
	ErrorCodes_AccessDeniedMutation       ErrorCodes = 2
	ErrorCodes_AccessDeniedMethod         ErrorCodes = 3
	ErrorCodes_ConnectionError            ErrorCodes = 10
	ErrorCodes_MalformedIRI               ErrorCodes = 11
	ErrorCodes_GeneralError               ErrorCodes = 12
	ErrorCodes_ListNoPagination           ErrorCodes = 50
	ErrorCodes_IllegalUpdate              ErrorCodes = 51
	ErrorCodes_NodeNotFound               ErrorCodes = 100
	ErrorCodes_NodeInvalidID              ErrorCodes = 101
	ErrorCodes_NodeInvalidType            ErrorCodes = 102
	ErrorCodes_EdgeNotFound               ErrorCodes = 150
	ErrorCodes_EdgeInvalidSubject         ErrorCodes = 151
	ErrorCodes_EdgeInvalidTarget          ErrorCodes = 152
	ErrorCodes_EdgeInvalidPredicate       ErrorCodes = 153
	ErrorCodes_IndexNotFound              ErrorCodes = 200
	ErrorCodes_IndexInvalidID             ErrorCodes = 201
	ErrorCodes_IndexInvalidValue          ErrorCodes = 202
	ErrorCodes_IndexInvalidNode           ErrorCodes = 203
	ErrorCodes_MetaNotFound               ErrorCodes = 250
	ErrorCodes_MetaInvalidObject          ErrorCodes = 251
	ErrorCodes_MetaInvalidKey             ErrorCodes = 252
	ErrorCodes_BatchIllegalOperation      ErrorCodes = 300
	ErrorCodes_FieldInvalidID             ErrorCodes = 350
	ErrorCodes_FieldInvalidUUID           ErrorCodes = 351
	ErrorCodes_FieldInvalidType           ErrorCodes = 352
	ErrorCodes_CounterInvalidIncrement    ErrorCodes = 400
	ErrorCodes_TransactionInvalidAction   ErrorCodes = 451
	ErrorCodes_TransactionSyntaxError     ErrorCodes = 452
	ErrorCodes_ReadCheckNaN               ErrorCodes = 453
	ErrorCodes_TransactionRetriesExceeded ErrorCodes = 454
	ErrorCodes_SequentialInvalidType      ErrorCodes = 500
)

var ErrorCodes_name = map[int32]string{
	0:   "AccessDenied",
	1:   "AccessDeniedIRI",
	2:   "AccessDeniedMutation",
	3:   "AccessDeniedMethod",
	10:  "ConnectionError",
	11:  "MalformedIRI",
	12:  "GeneralError",
	50:  "ListNoPagination",
	51:  "IllegalUpdate",
	100: "NodeNotFound",
	101: "NodeInvalidID",
	102: "NodeInvalidType",
	150: "EdgeNotFound",
	151: "EdgeInvalidSubject",
	152: "EdgeInvalidTarget",
	153: "EdgeInvalidPredicate",
	200: "IndexNotFound",
	201: "IndexInvalidID",
	202: "IndexInvalidValue",
	203: "IndexInvalidNode",
	250: "MetaNotFound",
	251: "MetaInvalidObject",
	252: "MetaInvalidKey",
	300: "BatchIllegalOperation",
	350: "FieldInvalidID",
	351: "FieldInvalidUUID",
	352: "FieldInvalidType",
	400: "CounterInvalidIncrement",
	451: "TransactionInvalidAction",
	452: "TransactionSyntaxError",
	453: "ReadCheckNaN",
	454: "TransactionRetriesExceeded",
	500: "SequentialInvalidType",
}

var ErrorCodes_value = map[string]int32{
	"AccessDenied":               0,
	"AccessDeniedIRI":            1,
	"AccessDeniedMutation":       2,
	"AccessDeniedMethod":         3,
	"ConnectionError":            10,
	"MalformedIRI":               11,
	"GeneralError":               12,
	"ListNoPagination":           50,
	"IllegalUpdate":              51,
	"NodeNotFound":               100,
	"NodeInvalidID":              101,
	"NodeInvalidType":            102,
	"EdgeNotFound":               150,
	"EdgeInvalidSubject":         151,
	"EdgeInvalidTarget":          152,
	"EdgeInvalidPredicate":       153,
	"IndexNotFound":              200,
	"IndexInvalidID":             201,
	"IndexInvalidValue":          202,
	"IndexInvalidNode":           203,
	"MetaNotFound":               250,
	"MetaInvalidObject":          251,
	"MetaInvalidKey":             252,
	"BatchIllegalOperation":      300,
	"FieldInvalidID":             350,
	"FieldInvalidUUID":           351,
	"FieldInvalidType":           352,
	"CounterInvalidIncrement":    400,
	"TransactionInvalidAction":   451,
	"TransactionSyntaxError":     452,
	"ReadCheckNaN":               453,
	"TransactionRetriesExceeded": 454,
	"SequentialInvalidType":      500,
}

func (x ErrorCodes) String() string {
	return proto.EnumName(ErrorCodes_name, int32(x))
}

func (ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f695bd055fd0de95, []int{3}
}

func init() {
	proto.RegisterEnum("cds.cabinet.v1.TransactionRetryBehaviour", TransactionRetryBehaviour_name, TransactionRetryBehaviour_value)
	proto.RegisterEnum("cds.cabinet.v1.CheckOperators", CheckOperators_name, CheckOperators_value)
	proto.RegisterEnum("cds.cabinet.v1.FieldType", FieldType_name, FieldType_value)
	proto.RegisterEnum("cds.cabinet.v1.ErrorCodes", ErrorCodes_name, ErrorCodes_value)
}

func init() { proto.RegisterFile("opts.proto", fileDescriptor_f695bd055fd0de95) }

var fileDescriptor_f695bd055fd0de95 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0xcb, 0x72, 0xe3, 0x44,
	0x14, 0x86, 0x2d, 0x2b, 0xf1, 0x4c, 0xce, 0x38, 0xe6, 0xa4, 0x27, 0x93, 0x99, 0x09, 0x50, 0xec,
	0xbd, 0x48, 0x15, 0xe4, 0x09, 0x14, 0xbb, 0x13, 0x54, 0xd8, 0xb2, 0x91, 0xda, 0x90, 0xac, 0x52,
	0x1d, 0xf5, 0x89, 0x2d, 0x50, 0xba, 0x8d, 0xd4, 0x4e, 0xc5, 0x4b, 0xde, 0x00, 0x36, 0x5c, 0xde,
	0x81, 0xb7, 0xe0, 0x52, 0x5c, 0xde, 0x01, 0x78, 0x08, 0x56, 0xc0, 0x82, 0x6a, 0xc9, 0x24, 0x82,
	0x59, 0xf6, 0xd7, 0xff, 0xf9, 0xfb, 0x3f, 0x47, 0xad, 0x06, 0x30, 0x4b, 0x5b, 0x1e, 0x2d, 0x0b,
	0x63, 0x0d, 0xeb, 0xa5, 0xaa, 0x3c, 0x4a, 0xe5, 0x55, 0xa6, 0xc9, 0x1e, 0xdd, 0xbe, 0xdd, 0x9f,
	0xc2, 0x4b, 0x51, 0x48, 0x5d, 0xca, 0xd4, 0x66, 0x46, 0xc7, 0x64, 0x8b, 0xf5, 0x09, 0x2d, 0xe4,
	0x6d, 0x66, 0x56, 0x05, 0xdb, 0x85, 0x9d, 0x60, 0x26, 0x26, 0xe3, 0x40, 0x84, 0x03, 0x6c, 0x31,
	0x06, 0xbd, 0x24, 0x8c, 0xce, 0x46, 0xfc, 0x32, 0x10, 0x82, 0x8f, 0xa7, 0x02, 0x3d, 0x86, 0xd0,
	0xdd, 0xb0, 0x98, 0x8b, 0xf8, 0x02, 0xdb, 0xfd, 0xcf, 0x3d, 0xe8, 0x0d, 0x16, 0x94, 0x7e, 0x3c,
	0x59, 0x52, 0x21, 0xad, 0x29, 0x4a, 0x06, 0xd0, 0xe1, 0xe7, 0x61, 0x22, 0x12, 0x6c, 0xb1, 0x1d,
	0xd8, 0xe6, 0xef, 0xcf, 0x82, 0x11, 0x7a, 0xce, 0x3e, 0x9a, 0x88, 0xcb, 0x7a, 0xd9, 0x76, 0x56,
	0x67, 0x31, 0x0f, 0x04, 0x8f, 0x2f, 0xc5, 0xbb, 0x41, 0x84, 0x3e, 0x3b, 0x00, 0xd6, 0x24, 0x1b,
	0xe5, 0x96, 0x2b, 0x1c, 0xf1, 0x24, 0xa9, 0x65, 0xdb, 0xec, 0x29, 0xbc, 0x76, 0xbf, 0xdc, 0x68,
	0x3a, 0xec, 0x09, 0x3c, 0x3a, 0xe1, 0xe2, 0x43, 0xce, 0x23, 0x7c, 0xd4, 0x17, 0xb0, 0x73, 0x9a,
	0x51, 0xae, 0xc4, 0x7a, 0x49, 0xec, 0x31, 0x6c, 0x45, 0x93, 0x21, 0xc7, 0x96, 0xf3, 0x99, 0xc6,
	0x7c, 0x18, 0x0e, 0x02, 0xc1, 0xd1, 0x73, 0xd1, 0xc2, 0x68, 0xc8, 0xcf, 0xb1, 0xcd, 0xba, 0xf0,
	0x78, 0x1a, 0x4f, 0xa6, 0x3c, 0x16, 0x17, 0xe8, 0xbb, 0x8a, 0x31, 0x17, 0x01, 0x6e, 0x39, 0xd7,
	0xc1, 0x64, 0x16, 0x09, 0x1e, 0xe3, 0x76, 0xff, 0xd3, 0x0e, 0x00, 0x2f, 0x0a, 0x53, 0x0c, 0x8c,
	0xa2, 0xd2, 0xe5, 0x0f, 0xd2, 0x94, 0xca, 0x72, 0x48, 0x3a, 0x23, 0x85, 0x2d, 0x17, 0xac, 0x49,
	0xc2, 0x38, 0x44, 0x8f, 0xbd, 0x80, 0xfd, 0x26, 0x1c, 0xaf, 0xac, 0x74, 0xa3, 0xc7, 0xb6, 0x6b,
	0xf7, 0x3f, 0x3b, 0x64, 0x17, 0x46, 0xa1, 0xef, 0x6c, 0x06, 0x46, 0x6b, 0xaa, 0x3e, 0x51, 0x75,
	0x20, 0x82, 0x3b, 0x6d, 0x2c, 0xf3, 0x6b, 0x53, 0xdc, 0xd4, 0xc6, 0x4f, 0xaa, 0xf9, 0x91, 0xa6,
	0x42, 0xe6, 0xb5, 0xa6, 0xcb, 0xf6, 0x01, 0x47, 0x59, 0x69, 0x23, 0x33, 0x95, 0xf3, 0x4c, 0xd7,
	0xc7, 0xbc, 0xc3, 0xf6, 0x60, 0x37, 0xcc, 0x73, 0x9a, 0xcb, 0x7c, 0xb6, 0x54, 0xd2, 0x12, 0x1e,
	0xbb, 0xd2, 0xc8, 0x28, 0x8a, 0x8c, 0x3d, 0x35, 0x2b, 0xad, 0x50, 0x39, 0x91, 0x23, 0xa1, 0xbe,
	0x95, 0x79, 0xa6, 0xc2, 0x21, 0x92, 0x8b, 0xd1, 0x40, 0x6e, 0x94, 0x78, 0xcd, 0xf6, 0xa0, 0xcb,
	0xd5, 0xfc, 0xa1, 0xf2, 0x0b, 0x8f, 0x3d, 0x07, 0xe6, 0xd0, 0x46, 0x97, 0xac, 0xae, 0x3e, 0xa2,
	0xd4, 0xe2, 0x97, 0x1e, 0x3b, 0x80, 0xbd, 0xc6, 0x86, 0x90, 0xc5, 0x9c, 0x2c, 0x7e, 0xe5, 0xb1,
	0x97, 0xb0, 0xdf, 0xe0, 0xd3, 0x82, 0x54, 0x96, 0xba, 0x5c, 0x5f, 0x7b, 0x8c, 0xc1, 0x6e, 0xa8,
	0x15, 0xdd, 0xdd, 0xfb, 0xff, 0xe8, 0xb1, 0xa7, 0xd0, 0xab, 0xd8, 0x43, 0xb6, 0x9f, 0x2a, 0xef,
	0x26, 0xfc, 0x40, 0xe6, 0x2b, 0xc2, 0x9f, 0x3d, 0xf6, 0x0c, 0xb0, 0xc9, 0x5d, 0x03, 0xf8, 0x8b,
	0xe7, 0x62, 0x8f, 0xc9, 0xca, 0x7b, 0xdb, 0x3f, 0x2b, 0x07, 0x87, 0x36, 0xc2, 0x49, 0x9d, 0xfa,
	0xaf, 0xea, 0xb8, 0x06, 0x7f, 0x8f, 0xd6, 0xf8, 0xb7, 0xc7, 0x0e, 0xe1, 0xd9, 0x89, 0xb4, 0xe9,
	0x62, 0x33, 0xc8, 0xfa, 0xaa, 0xbb, 0xf1, 0x7e, 0xd3, 0x76, 0x05, 0xd5, 0x65, 0x7b, 0xc8, 0xf7,
	0x6b, 0xdb, 0xe5, 0x68, 0xc2, 0xd9, 0x2c, 0x1c, 0xe2, 0x6f, 0xaf, 0xe0, 0x6a, 0xa8, 0xbf, 0xb7,
	0xd9, 0x1b, 0xf0, 0x7c, 0x60, 0x56, 0xda, 0x52, 0xf1, 0xaf, 0x89, 0x4e, 0x0b, 0xba, 0x21, 0x6d,
	0xf1, 0x33, 0x9f, 0xbd, 0x09, 0x2f, 0x1a, 0xff, 0xec, 0x46, 0x11, 0x54, 0x0b, 0xfc, 0xd6, 0x67,
	0xaf, 0xc3, 0x41, 0x63, 0x3b, 0x59, 0x6b, 0x2b, 0xef, 0xea, 0x1b, 0xf1, 0x9d, 0xef, 0x1a, 0x8f,
	0x49, 0xaa, 0xea, 0x07, 0x8d, 0x64, 0x84, 0xdf, 0xfb, 0xec, 0x2d, 0x38, 0xfc, 0xdf, 0x13, 0x90,
	0x51, 0xc9, 0xef, 0x52, 0x22, 0x45, 0x0a, 0x7f, 0xf0, 0x5d, 0xb3, 0x09, 0x7d, 0xb2, 0x22, 0x6d,
	0x33, 0x99, 0x37, 0x93, 0xfe, 0xe1, 0x5f, 0x75, 0xaa, 0x67, 0xe5, 0xf8, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x07, 0xb5, 0x32, 0x60, 0x64, 0x04, 0x00, 0x00,
}
