// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cabinet.proto

package cabinet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("cabinet.proto", fileDescriptor_d677e6cffaacc14d) }

var fileDescriptor_d677e6cffaacc14d = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcb, 0x6e, 0x1a, 0x31,
	0x14, 0x86, 0x77, 0xa5, 0xb8, 0x5c, 0x8d, 0x68, 0x29, 0xed, 0x23, 0x54, 0xae, 0x04, 0x52, 0x97,
	0xbd, 0x68, 0x5a, 0x55, 0x51, 0x42, 0x16, 0x90, 0x64, 0x1b, 0x99, 0xf1, 0x11, 0x8c, 0x42, 0x3c,
	0x64, 0xec, 0x89, 0xf2, 0x86, 0x79, 0xad, 0xc8, 0xe3, 0xe3, 0x39, 0x66, 0x40, 0xec, 0x8e, 0xbf,
	0xff, 0xfc, 0xbf, 0xef, 0xac, 0x9b, 0xca, 0x75, 0xa6, 0xc1, 0x8a, 0x7d, 0x91, 0xdb, 0x7c, 0x3a,
	0x36, 0x50, 0x3c, 0x67, 0x29, 0xdc, 0xa7, 0x79, 0xa9, 0x2d, 0x14, 0x88, 0x79, 0xc0, 0xa0, 0x36,
	0x80, 0x6c, 0x14, 0x58, 0xa6, 0x15, 0xbc, 0x34, 0x1b, 0x1f, 0xc1, 0xca, 0x26, 0xd3, 0xb9, 0x0a,
	0xe6, 0x49, 0x60, 0x06, 0x9e, 0x4a, 0xd0, 0x36, 0x93, 0x3b, 0x54, 0x3e, 0x07, 0xc5, 0x16, 0x52,
	0x1b, 0x99, 0xda, 0x2c, 0xd7, 0x28, 0x75, 0xcc, 0x56, 0x16, 0xa0, 0xfc, 0x68, 0xf6, 0xda, 0x62,
	0xbd, 0xc4, 0x2f, 0x7e, 0xe5, 0x2d, 0x7c, 0xce, 0xba, 0x89, 0x5f, 0xf7, 0x5f, 0xd8, 0x81, 0x05,
	0xde, 0x17, 0x38, 0x5e, 0xba, 0x69, 0x8c, 0x9d, 0x0e, 0xc5, 0xa2, 0xb4, 0xd2, 0x65, 0x2e, 0xc1,
	0xec, 0x73, 0x6d, 0x80, 0xff, 0x60, 0x1d, 0x6c, 0xba, 0x93, 0xbb, 0xf2, 0x84, 0x67, 0x2c, 0x62,
	0xbd, 0xf6, 0x7d, 0x63, 0xad, 0x7f, 0x6a, 0x03, 0xff, 0xc1, 0xf2, 0xbe, 0xc0, 0x2a, 0x58, 0x06,
	0x04, 0xb0, 0xfb, 0x3b, 0x7b, 0xef, 0xd0, 0x55, 0x66, 0x2c, 0xf7, 0xaa, 0x2b, 0x69, 0x59, 0x44,
	0xc8, 0x70, 0xe1, 0x0e, 0xd6, 0xe5, 0x0f, 0x44, 0x28, 0xc9, 0x40, 0x04, 0x0d, 0x33, 0xd6, 0xae,
	0x58, 0x35, 0x05, 0xea, 0xf1, 0x1c, 0x3c, 0x46, 0xb4, 0x87, 0x05, 0x58, 0xe9, 0xf7, 0x80, 0x15,
	0xed, 0xa1, 0x06, 0xb4, 0x24, 0x87, 0x70, 0x0f, 0xa1, 0x8c, 0x8e, 0xb6, 0x26, 0x14, 0x7f, 0x9d,
	0x2b, 0x3c, 0x22, 0xac, 0x28, 0xbe, 0x06, 0x14, 0xef, 0x10, 0xc6, 0x87, 0x92, 0xe2, 0x89, 0xa0,
	0xe1, 0x37, 0xfb, 0x70, 0x43, 0x8f, 0x84, 0x8f, 0x44, 0x34, 0x0a, 0xb6, 0xaf, 0x31, 0x3c, 0xba,
	0xfb, 0x19, 0x6b, 0x2f, 0x41, 0xaa, 0x64, 0x0b, 0xe9, 0x03, 0x1f, 0x8a, 0xba, 0xa6, 0x33, 0x8b,
	0x10, 0x7a, 0x2e, 0xd9, 0x60, 0x55, 0x3f, 0xda, 0xa4, 0x00, 0x69, 0x81, 0x4f, 0x05, 0x21, 0x9a,
	0xc4, 0x67, 0x7c, 0x39, 0xa9, 0x61, 0xd8, 0xaf, 0x38, 0xec, 0x76, 0xaf, 0x5c, 0xd8, 0x44, 0x34,
	0xd1, 0x99, 0xd7, 0x7b, 0x10, 0x80, 0xaf, 0x3e, 0x0e, 0xf0, 0xe8, 0x4c, 0xc0, 0x4f, 0xd6, 0xa5,
	0x6e, 0x77, 0x53, 0x63, 0x71, 0x30, 0x0e, 0xd6, 0x8f, 0x4d, 0x8c, 0xfe, 0x3f, 0xac, 0x47, 0x42,
	0x75, 0x77, 0x71, 0x67, 0x7c, 0x83, 0x9f, 0x8e, 0xb8, 0x8f, 0x58, 0xbf, 0xab, 0x3e, 0xf4, 0xfc,
	0x2d, 0x00, 0x00, 0xff, 0xff, 0x15, 0xe6, 0xcf, 0xb5, 0x8c, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CabinetServiceClient is the client API for CabinetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CabinetServiceClient interface {
	// @required: node_id|Edge, value
	// @throws: NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
	CounterDelete(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*MutationResponse, error)
	// @required: node_id|Edge, value
	// @throws: NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
	CounterValue(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterValueResponse, error)
	// @required: edge.subject, edge.target, edge.predicate
	// @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
	EdgeGet(ctx context.Context, in *EdgeGetRequest, opts ...grpc.CallOption) (*EdgeGetResponse, error)
	// @required: edge.subject
	// @optional: edge.predicate, edge.resume_from, edge.page_size, edge.mode
	// @throws: ListNoPagination, EdgeInvalidSubject, EdgeInvalidPredicate
	EdgeList(ctx context.Context, in *EdgeListRequest, opts ...grpc.CallOption) (*EdgeListResponse, error)
	// @required: index.type, index.field, index.node
	// @throws: IndexNotFound, IndexInvalidID, IndexInvalidQuery
	IndexGet(ctx context.Context, in *IndexGetRequest, opts ...grpc.CallOption) (*IndexGetResponse, error)
	// @required: index.type, index.field
	// @throws: IndexInvalidID
	IndexList(ctx context.Context, in *IndexListRequest, opts ...grpc.CallOption) (*IndexListResponse, error)
	// @required: field.edge|field.node_id, key
	// @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
	MetaGet(ctx context.Context, in *MetaGetRequest, opts ...grpc.CallOption) (*MetaGetResponse, error)
	// @required: field.edge|field.node_id
	// @throws: MetaInvalidObject, MetaInvalidKey
	MetaList(ctx context.Context, in *MetaListRequest, opts ...grpc.CallOption) (*MetaListResponse, error)
	// @required: id, type
	// @throws: NodeNotFound, NodeInvalidID, NodeInvalidType
	NodeGet(ctx context.Context, in *NodeGetRequest, opts ...grpc.CallOption) (*NodeGetResponse, error)
	// List node with pagination
	// @required: type, per_page
	NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error)
	// @required: <action.*>, retry_mode
	// @throws: TransactionInvalidAction, TransactionSyntaxError
	Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionMutationResponse, error)
	// @required: source, operator, target
	// @throws: @ReadCheckNaN
	ReadCheck(ctx context.Context, in *ReadCheckRequest, opts ...grpc.CallOption) (*ReadCheckResponse, error)
	// @required: seq.type, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialCreate(ctx context.Context, in *SequentialMutationRequest, opts ...grpc.CallOption) (*SequentialMutationResponse, error)
	// @required: seq.type, seq.seqid, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialUpdate(ctx context.Context, in *SequentialUpdateRequest, opts ...grpc.CallOption) (*MutationResponse, error)
	// @required: seq.type, seq.seqid, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialDelete(ctx context.Context, in *SequentialDeleteRequest, opts ...grpc.CallOption) (*MutationResponse, error)
	// @required: seq.type, seq.seqid, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialGet(ctx context.Context, in *SequentialGetRequest, opts ...grpc.CallOption) (*SequentialGetResponse, error)
	// @required: type, per_page
	// @throws: SequentialInvalidType
	SequentialList(ctx context.Context, in *SequentialListRequest, opts ...grpc.CallOption) (*SequentialListResponse, error)
}

type cabinetServiceClient struct {
	cc *grpc.ClientConn
}

func NewCabinetServiceClient(cc *grpc.ClientConn) CabinetServiceClient {
	return &cabinetServiceClient{cc}
}

func (c *cabinetServiceClient) CounterDelete(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/CounterDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) CounterValue(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterValueResponse, error) {
	out := new(CounterValueResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/CounterValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) EdgeGet(ctx context.Context, in *EdgeGetRequest, opts ...grpc.CallOption) (*EdgeGetResponse, error) {
	out := new(EdgeGetResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/EdgeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) EdgeList(ctx context.Context, in *EdgeListRequest, opts ...grpc.CallOption) (*EdgeListResponse, error) {
	out := new(EdgeListResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/EdgeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) IndexGet(ctx context.Context, in *IndexGetRequest, opts ...grpc.CallOption) (*IndexGetResponse, error) {
	out := new(IndexGetResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/IndexGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) IndexList(ctx context.Context, in *IndexListRequest, opts ...grpc.CallOption) (*IndexListResponse, error) {
	out := new(IndexListResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/IndexList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) MetaGet(ctx context.Context, in *MetaGetRequest, opts ...grpc.CallOption) (*MetaGetResponse, error) {
	out := new(MetaGetResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/MetaGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) MetaList(ctx context.Context, in *MetaListRequest, opts ...grpc.CallOption) (*MetaListResponse, error) {
	out := new(MetaListResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/MetaList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) NodeGet(ctx context.Context, in *NodeGetRequest, opts ...grpc.CallOption) (*NodeGetResponse, error) {
	out := new(NodeGetResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/NodeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error) {
	out := new(NodeListResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/NodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionMutationResponse, error) {
	out := new(TransactionMutationResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/Transaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) ReadCheck(ctx context.Context, in *ReadCheckRequest, opts ...grpc.CallOption) (*ReadCheckResponse, error) {
	out := new(ReadCheckResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/ReadCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) SequentialCreate(ctx context.Context, in *SequentialMutationRequest, opts ...grpc.CallOption) (*SequentialMutationResponse, error) {
	out := new(SequentialMutationResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/SequentialCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) SequentialUpdate(ctx context.Context, in *SequentialUpdateRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/SequentialUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) SequentialDelete(ctx context.Context, in *SequentialDeleteRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/SequentialDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) SequentialGet(ctx context.Context, in *SequentialGetRequest, opts ...grpc.CallOption) (*SequentialGetResponse, error) {
	out := new(SequentialGetResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/SequentialGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetServiceClient) SequentialList(ctx context.Context, in *SequentialListRequest, opts ...grpc.CallOption) (*SequentialListResponse, error) {
	out := new(SequentialListResponse)
	err := c.cc.Invoke(ctx, "/CabinetService/SequentialList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CabinetServiceServer is the server API for CabinetService service.
type CabinetServiceServer interface {
	// @required: node_id|Edge, value
	// @throws: NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
	CounterDelete(context.Context, *CounterRequest) (*MutationResponse, error)
	// @required: node_id|Edge, value
	// @throws: NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
	CounterValue(context.Context, *CounterRequest) (*CounterValueResponse, error)
	// @required: edge.subject, edge.target, edge.predicate
	// @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
	EdgeGet(context.Context, *EdgeGetRequest) (*EdgeGetResponse, error)
	// @required: edge.subject
	// @optional: edge.predicate, edge.resume_from, edge.page_size, edge.mode
	// @throws: ListNoPagination, EdgeInvalidSubject, EdgeInvalidPredicate
	EdgeList(context.Context, *EdgeListRequest) (*EdgeListResponse, error)
	// @required: index.type, index.field, index.node
	// @throws: IndexNotFound, IndexInvalidID, IndexInvalidQuery
	IndexGet(context.Context, *IndexGetRequest) (*IndexGetResponse, error)
	// @required: index.type, index.field
	// @throws: IndexInvalidID
	IndexList(context.Context, *IndexListRequest) (*IndexListResponse, error)
	// @required: field.edge|field.node_id, key
	// @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
	MetaGet(context.Context, *MetaGetRequest) (*MetaGetResponse, error)
	// @required: field.edge|field.node_id
	// @throws: MetaInvalidObject, MetaInvalidKey
	MetaList(context.Context, *MetaListRequest) (*MetaListResponse, error)
	// @required: id, type
	// @throws: NodeNotFound, NodeInvalidID, NodeInvalidType
	NodeGet(context.Context, *NodeGetRequest) (*NodeGetResponse, error)
	// List node with pagination
	// @required: type, per_page
	NodeList(context.Context, *NodeListRequest) (*NodeListResponse, error)
	// @required: <action.*>, retry_mode
	// @throws: TransactionInvalidAction, TransactionSyntaxError
	Transaction(context.Context, *TransactionRequest) (*TransactionMutationResponse, error)
	// @required: source, operator, target
	// @throws: @ReadCheckNaN
	ReadCheck(context.Context, *ReadCheckRequest) (*ReadCheckResponse, error)
	// @required: seq.type, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialCreate(context.Context, *SequentialMutationRequest) (*SequentialMutationResponse, error)
	// @required: seq.type, seq.seqid, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialUpdate(context.Context, *SequentialUpdateRequest) (*MutationResponse, error)
	// @required: seq.type, seq.seqid, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialDelete(context.Context, *SequentialDeleteRequest) (*MutationResponse, error)
	// @required: seq.type, seq.seqid, seq.node
	// @throws: NodeNotFound, SequentialInvalidType
	SequentialGet(context.Context, *SequentialGetRequest) (*SequentialGetResponse, error)
	// @required: type, per_page
	// @throws: SequentialInvalidType
	SequentialList(context.Context, *SequentialListRequest) (*SequentialListResponse, error)
}

func RegisterCabinetServiceServer(s *grpc.Server, srv CabinetServiceServer) {
	s.RegisterService(&_CabinetService_serviceDesc, srv)
}

func _CabinetService_CounterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).CounterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/CounterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).CounterDelete(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_CounterValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).CounterValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/CounterValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).CounterValue(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_EdgeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).EdgeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/EdgeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).EdgeGet(ctx, req.(*EdgeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_EdgeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).EdgeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/EdgeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).EdgeList(ctx, req.(*EdgeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_IndexGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).IndexGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/IndexGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).IndexGet(ctx, req.(*IndexGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_IndexList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).IndexList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/IndexList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).IndexList(ctx, req.(*IndexListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_MetaGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).MetaGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/MetaGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).MetaGet(ctx, req.(*MetaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_MetaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).MetaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/MetaList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).MetaList(ctx, req.(*MetaListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_NodeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).NodeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/NodeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).NodeGet(ctx, req.(*NodeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).NodeList(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/Transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).Transaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_ReadCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).ReadCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/ReadCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).ReadCheck(ctx, req.(*ReadCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_SequentialCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequentialMutationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).SequentialCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/SequentialCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).SequentialCreate(ctx, req.(*SequentialMutationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_SequentialUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequentialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).SequentialUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/SequentialUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).SequentialUpdate(ctx, req.(*SequentialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_SequentialDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequentialDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).SequentialDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/SequentialDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).SequentialDelete(ctx, req.(*SequentialDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_SequentialGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequentialGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).SequentialGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/SequentialGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).SequentialGet(ctx, req.(*SequentialGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CabinetService_SequentialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequentialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetServiceServer).SequentialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CabinetService/SequentialList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetServiceServer).SequentialList(ctx, req.(*SequentialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CabinetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CabinetService",
	HandlerType: (*CabinetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CounterDelete",
			Handler:    _CabinetService_CounterDelete_Handler,
		},
		{
			MethodName: "CounterValue",
			Handler:    _CabinetService_CounterValue_Handler,
		},
		{
			MethodName: "EdgeGet",
			Handler:    _CabinetService_EdgeGet_Handler,
		},
		{
			MethodName: "EdgeList",
			Handler:    _CabinetService_EdgeList_Handler,
		},
		{
			MethodName: "IndexGet",
			Handler:    _CabinetService_IndexGet_Handler,
		},
		{
			MethodName: "IndexList",
			Handler:    _CabinetService_IndexList_Handler,
		},
		{
			MethodName: "MetaGet",
			Handler:    _CabinetService_MetaGet_Handler,
		},
		{
			MethodName: "MetaList",
			Handler:    _CabinetService_MetaList_Handler,
		},
		{
			MethodName: "NodeGet",
			Handler:    _CabinetService_NodeGet_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _CabinetService_NodeList_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _CabinetService_Transaction_Handler,
		},
		{
			MethodName: "ReadCheck",
			Handler:    _CabinetService_ReadCheck_Handler,
		},
		{
			MethodName: "SequentialCreate",
			Handler:    _CabinetService_SequentialCreate_Handler,
		},
		{
			MethodName: "SequentialUpdate",
			Handler:    _CabinetService_SequentialUpdate_Handler,
		},
		{
			MethodName: "SequentialDelete",
			Handler:    _CabinetService_SequentialDelete_Handler,
		},
		{
			MethodName: "SequentialGet",
			Handler:    _CabinetService_SequentialGet_Handler,
		},
		{
			MethodName: "SequentialList",
			Handler:    _CabinetService_SequentialList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cabinet.proto",
}
