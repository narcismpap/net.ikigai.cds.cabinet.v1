// Package: net.ikigai.cds
// Module: cabinet.services
//
// Author: Narcis M. Pap
// Copyright (c) 2018 Ikigai Cloud. All rights reserved.

syntax = "proto3";
package cds.cabinet.v1;

import "shared.proto";

// Sequential Number Engine can be used to generate well-defined sequences, similar to traditional Relational DB IDs
// These sequences are only useful in a handful of cases where the risk of collisions is low
// Cabinet Registry uses Sequential ID to issue Predicate, Node Type, etc. IDs used to keep the dataset small
// Sequence ID always point to a Node, which can then be used for property and meta storage or even creating edges

// Schematic Representation (0 stores last_num)
// /s/{SEQUENTIAL_NAME}/[1..n + 0] = {NODE_ID}

// IRI Relative Representation:
// Last Number: ./s/{SEQUENTIAL_NAME}
// A. Note:     ./s/{SEQUENTIAL_NAME}/{SEQ_NUM}

message SequentialListRequest{
    ListOptions opt = 1;

    string type = 10;

    bool include_type = 20;
    bool include_seqid = 21;
    bool include_uuid = 22;
}
