// Package: net.ikigai.cds
// Module: cabinet.services
//
// Author: Narcis M. Pap
// Copyright (c) 2018 Ikigai Cloud. All rights reserved.

syntax = "proto3";
package cds.cabinet.v1;

import "service_counter.proto";
import "service_edge.proto";
import "service_index.proto";
import "service_meta.proto";
import "service_node.proto";

import "counter.proto";
import "edge.proto";
import "index.proto";
import "meta.proto";
import "node.proto";

import "opts.proto";
import "shared.proto";

// Transactions are the fundamental ACID compliance layer within Cabinet
// Our underlying data store allows for a novel approach, where a transaction can be invalidated by a change to
// any of the values read or written to as part of single commit event. Applications can take advantage of this by
// employing strategic [ReadCheck] operators to ensure data predictability in a highly distributed system.

// No schema/IRI representation exists for Transactions as they do not store any data.

message TransactionAction{
    oneof action{
        Counter counter_increment = 1;
        Counter counter_delete = 2;
        Counter counter_register = 3;

        Edge edge_update = 11;
        Edge edge_delete = 12;
        Edge edge_clear = 13;

        Index index_create = 21;
        Index index_delete = 22;
        // index clearing is the app's responsibility using *.index_delete

        Meta meta_update = 31;
        Meta meta_delete = 32;
        Meta meta_clear = 33;

        Node node_create = 40;
        Node node_update = 41;
        Node node_delete = 42;

        ReadCheckRequest read_check = 50;
    }

    uint32 action_id = 80;
}

message TransactionActionResponse{
    MutationStatus status = 1;
    uint32 action_id = 2;
    string error = 3;

    oneof response {
        NodeCreateResponse node_create = 20;
        ReadCheckResponse read_check = 30;
    }

}

message ReadCheckRequest{
    string source = 1;

    CheckOperators operator = 2;
    CheckTarget target = 3;
}

message ReadCheckResponse{
    bool result = 1;
}

message CheckTarget{
    oneof target{
        string val = 1;
        string iri = 2;
    }
}
