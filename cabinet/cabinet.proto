// Package: net.ikigai.cds
// Module: cabinet.services
//
// Author: Narcis M. Pap
// Copyright (c) 2018 Ikigai Cloud. All rights reserved.

syntax = "proto3";

import "service_counter.proto";
import "service_edge.proto";
import "service_index.proto";
import "service_meta.proto";
import "service_node.proto";
import "service_sequential.proto";
import "service_transaction.proto";

import "shared.proto";

// Ikigai Cloud Data Services
// > Cabinet

// This service provides read, list and mutation APIs for the core elements of CDS Cabinet:
// Node, Edges, Indexes, Meta, Counters and Transactions

service CabinetService {

    // **** Counters *****

    // @required: node_id|Edge, value
    // @throws: CounterInvalidIncrement, NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
    rpc CounterIncrement(CounterIncrementRequest) returns(MutationResponse);

    // @required: node_id|Edge, value
    // @throws: NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
    rpc CounterDelete(CounterRequest) returns(MutationResponse);

    // @required: node_id|Edge, value
    // @throws: NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
    rpc CounterValue(CounterRequest) returns(CounterValueResponse);

    // **** Edges *****

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
    rpc EdgeCreate(EdgeMutationRequest) returns(MutationResponse);

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
    rpc EdgeUpdate(EdgeMutationRequest) returns(MutationResponse);

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
    rpc EdgeDelete(EdgeMutationRequest) returns(MutationResponse);

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
    rpc EdgeGet(EdgeGetRequest) returns(EdgeGetResponse);

    // @required: edge.subject
    // @optional: edge.predicate, edge.resume_from, edge.page_size, edge.mode
    // @throws: ListNoPagination, EdgeInvalidSubject, EdgeInvalidPredicate
    rpc EdgeList(EdgeListRequest) returns(EdgeListResponse);

    // **** Indexes *****

    // @required: index.type, index.field, index.node, index.value
    // @throws: IndexInvalidQuery, IndexInvalidID
    rpc IndexCreate(IndexMutationRequest) returns(MutationResponse);

    // @required: index.type, index.field, index.node, index.value
    // @throws: IndexNotFound, IndexInvalidQuery, IndexInvalidID
    rpc IndexUpdate(IndexMutationRequest) returns(MutationResponse);

    // @required: index.type, index.field, index.node
    // @throws: IndexNotFound, IndexInvalidQuery, IndexInvalidID
    rpc IndexDelete(IndexMutationRequest) returns(MutationResponse);

    // @required: index.type, index.field, index.node
    // @throws: IndexNotFound, IndexInvalidID, IndexInvalidQuery
    rpc IndexGet(IndexGetRequest) returns(IndexGetResponse);

    // @required: index.type, index.field
    // @throws: IndexInvalidID
    rpc IndexList(IndexListRequest) returns(IndexListResponse);

    // **** Meta *****

    // @required: field.edge|field.node_id, meta
    // @throws: MetaInvalidObject, MetaInvalidKey
    rpc MetaCreate(MetaMutationRequest) returns(MutationResponse);

    // @required: field.edge|field.node_id, meta
    // @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
    rpc MetaUpdate(MetaMutationRequest) returns(MutationResponse);

    // @required: field.edge|field.node_id, meta
    // @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
    rpc MetaDelete(MetaMutationRequest) returns(MutationResponse);

    // @required: field.edge|field.node_id, key
    // @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
    rpc MetaGet(MetaGetRequest) returns(MetaGetResponse);

    // @required: field.edge|field.node_id
    // @throws: MetaInvalidObject, MetaInvalidKey
    rpc MetaList(MetaListRequest) returns(MetaListResponse);

    // **** Node *****

    // @required: node.type, node.id
    // @throws: NodeInvalidID, NodeInvalidType
    rpc NodeCreate(NodeMutationRequest) returns(NodeCreateResponse);

    // @required: node.type, node.id
    // @throws: NodeNotFound, NodeIllegalUpdate
    rpc NodeUpdate(NodeMutationRequest) returns(MutationResponse);

    // @required: node.type, node.id
    // @throws: NodeNotFound, NodeInvalidID, NodeInvalidType
    rpc NodeDelete(NodeMutationRequest) returns(MutationResponse);

    // @required: id, type
    // @throws: NodeNotFound, NodeInvalidID, NodeInvalidType
    rpc NodeGet(NodeGetRequest) returns(NodeGetResponse);

    // List node with pagination
    // @required: type, per_page
    rpc NodeList(NodeListRequest) returns(NodeList)

    // **** Transaction *****

    // @required: action.*, retry_mode
    // @throws: TransactionInvalidAction, TransactionSyntaxError
    rpc Transaction(TransactionRequest) returns(TransactionMutationResponse);

    // @required: source, operator, target
    // @throws: @ReadCheckNaN
    rpc ReadCheck(ReadCheck) returns(ReadCheckResponse)

    // **** Sequences *****

    // @required: seq.type, seq.node
    // @throws: NodeNotFound, SequentialInvalidType
    rpc SequentialCreate(SequentialMutationRequest) returns(SequentialMutationResponse);

    // @required: seq.type, seq.seqid, seq.node
    // @throws: NodeNotFound, SequentialInvalidType
    rpc SequentialUpdate(SequentialUpdateRequest) returns(MutationResponse);

    // @required: seq.type, seq.seqid, seq.node
    // @throws: NodeNotFound, SequentialInvalidType
    rpc SequentialDelete(SequentialDeleteRequest) returns(MutationResponse);

    // @required: seq.type, seq.seqid, seq.node
    // @throws: NodeNotFound, SequentialInvalidType
    rpc SequentialGet(SequentialGetRequest) returns(SequentialGetResponse);

    // @required: type, per_page
    // @throws: SequentialInvalidType
    rpc SequentialList(SequentialListRequest) returns(SequentialListResponse);


}
