syntax = "proto3";

import "registry.proto";
import "service_counter.proto";
import "service_edge.proto";
import "service_index.proto";
import "service_meta.proto";
import "service_node.proto";
import "service_transaction.proto";
import "shared.proto";



service CabinetService {

    // **** Registry *****

    // @required: type, uuid, name
    // @throws: FieldInvalidID, FieldInvalidUUID
    rpc FieldRegister(FieldRegisterRequest) returns(FieldRegisterResponse);

    // @required: seq_id OR uuid
    // @throws: FieldInvalidID, FieldInvalidUUID
    rpc FieldGet(FieldGetRequest) returns(FieldGetResponse);

    // @required: type
    rpc FieldList(FieldListRequest) returns(FieldListResponse);

    // **** Counters *****
    // @required: node_id|Edge, value
    // @throws: CounterInvalidIncrement, NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
    rpc CounterIncrement(CounterIncrementRequest) returns(MutationResponse);

    // @required: node_id|Edge, value
    // @throws: NodeInvalidID, EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
    rpc CounterValue(CounterValueRequest) returns(CounterValueResponse);

    // **** Edges *****

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate
    rpc EdgeCreate(EdgeMutationRequest) returns(MutationResponse);

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
    rpc EdgeUpdate (EdgeMutationRequest) returns (MutationResponse);

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
    rpc EdgeDelete (EdgeMutationRequest) returns (MutationResponse);

    // @required: edge.subject, edge.target, edge.predicate
    // @throws: EdgeInvalidSubject, EdgeInvalidTarget, EdgeInvalidPredicate, EdgeNotFound
    rpc EdgeGet (EdgeGetRequest) returns (EdgeGetResponse);

    // lists edges and properties by:
    // @required: edge.subject
    // @optional: edge.predicate, edge.resume_from, edge.page_size, edge.mode
    // @throws: ListNoPagination, EdgeInvalidSubject, EdgeInvalidPredicate
    rpc EdgeList (EdgeListRequest) returns (EdgeListResponse);

    // **** Indexes *****

    rpc IndexCreate (IndexMutationRequest) returns (MutationResponse);
    rpc IndexUpdate (IndexMutationRequest) returns (MutationResponse);
    rpc IndexDelete (IndexMutationRequest) returns (MutationResponse);

    rpc IndexGet(IndexGetRequest) returns(IndexGetResponse);
    rpc IndexList(IndexListRequest) returns(IndexListResponse);

    // **** Meta *****

    // @required: field.edge|field.node_id, meta
    // @throws: MetaInvalidObject, MetaInvalidKey
    rpc MetaCreate(MetaMutationRequest) returns(MutationResponse);

    // @required: field.edge|field.node_id, meta
    // @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
    rpc MetaUpdate(MetaMutationRequest) returns(MutationResponse);

    // @required: field.edge|field.node_id, meta
    // @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
    rpc MetaDelete(MetaMutationRequest) returns(MutationResponse);

    // @required: field.edge|field.node_id, key
    // @throws: MetaNotFound, MetaInvalidObject, MetaInvalidKey
    rpc MetaGet(MetaGetRequest) returns(MetaGetResponse);

    // @required: field.edge|field.node_id
    // @throws: MetaInvalidObject, MetaInvalidKey
    rpc MetaList(MetaListRequest) returns(MetaListResponse);

    // **** Node *****

    // @required: node.type, node.id
    // @throws: NodeInvalidID, NodeInvalidType
    rpc NodeCreate (NodeMutationRequest) returns (MutationResponse);

    // @required: node.type, node.id
    // @throws: NodeNotFound, NodeIllegalUpdate
    rpc NodeUpdate (NodeMutationRequest) returns (MutationResponse);

    // @required: node.type, node.id
    // @throws: NodeNotFound, NodeInvalidID, NodeInvalidType
    rpc NodeDelete (NodeMutationRequest) returns (MutationResponse);

    // @required: id, type
    // @throws: NodeNotFound, NodeInvalidID, NodeInvalidType
    rpc NodeGet (NodeGetRequest) returns (NodeGetResponse);

    // List node with pagination
    // @required: type, per_page
    rpc NodeList (NodeListRequest) returns (NodeList)

    // **** Transaction *****

    // @required: action.*, retry_mode
    // @throws: TransactionInvalidAction, TransactionSyntaxError
    rpc Transaction (TransactionRequest) returns (TransactionMutationResponse);

    // @required: source, operator, target
    // @throws: @ReadCheckNaN
    rpc ReadCheck (ReadCheck) returns (ReadCheckResponse)
}
